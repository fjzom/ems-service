plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'groovy'
    id 'idea'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-test', version: '1.4.0.RELEASE'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.5'
    testImplementation group: 'org.spockframework', name: 'spock-spring', version: '2.0-groovy-3.0'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
}

test {

    finalizedBy jacocoTestReport // report is always generated after tests run
    /*DEFAULT VALUES*/
//	jacoco {
//		enabled = true
//		destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
//		includes = []
//		excludes = []
//		excludeClassLoaders = []
//		includeNoLocationClasses = false
//		sessionId = "<auto-generated value>"
//		dumpOnExit = true
//		classDumpDir = null
//		output = JacocoTaskExtension.Output.FILE
//		address = "localhost"
//		port = 6300
//		jmx = false
//
//	}
}
def testExclusionList = [
        '**/domain/**',
]
private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect{
        fileTree(dir:it,
                exclude:[
                        '**/domain/**',
                        '**/config/**',
                        '**/controller/*EmployeeManagementSystemControllerJpa*',
                        '**/*EmsServiceApplication*'
                ]
        )
    }))
}
jacocoTestReport {
    dependsOn test //test are required to run before generating a report
//	reports {xml.required = true
//	csv.required = true
//	html.outputLocation =  true}

    afterEvaluate {
        excludedClassFilesForReport(classDirectories)
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {

    afterEvaluate {
        excludedClassFilesForReport(classDirectories)
    }
    violationRules {
        rule {
            limit {
                minimum = 0.20
            }
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.10
            }
        }

    }
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}